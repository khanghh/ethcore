// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*receiptMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (r Receipt) MarshalJSON() ([]byte, error) {
	type Receipt struct {
		BlockHash         common.Hash     `json:"blockHash,omitempty"`
		BlockNumber       *hexutil.Big    `json:"blockNumber,omitempty"`
		TransactionIndex  hexutil.Uint    `json:"transactionIndex"             gencodec:"required"`
		TransactionHash   common.Hash     `json:"transactionHash"              gencodec:"required"`
		Type              hexutil.Uint64  `json:"type,omitempty"`
		ContractAddress   common.Address  `json:"contractAddress,omitempty"`
		GasUsed           hexutil.Uint64  `json:"gasUsed"                      gencodec:"required"`
		CumulativeGasUsed hexutil.Uint64  `json:"cumulativeGasUsed"            gencodec:"required"`
		EffectiveGasPrice *hexutil.Big    `json:"effectiveGasPrice,omitempty"`
		From              common.Address  `json:"from"                         gencodec:"required"`
		To                *common.Address `json:"to,omitempty"`
		Logs              []*Log          `json:"logs"                         gencodec:"required"`
		LogsBloom         Bloom           `json:"logsBloom"                    gencodec:"required"`
		Status            hexutil.Uint64  `json:"status"                       gencodec:"required"`
	}
	var enc Receipt
	enc.BlockHash = r.BlockHash
	enc.BlockNumber = (*hexutil.Big)(r.BlockNumber)
	enc.TransactionIndex = hexutil.Uint(r.TransactionIndex)
	enc.TransactionHash = r.TransactionHash
	enc.Type = hexutil.Uint64(r.Type)
	enc.ContractAddress = r.ContractAddress
	enc.GasUsed = hexutil.Uint64(r.GasUsed)
	enc.CumulativeGasUsed = hexutil.Uint64(r.CumulativeGasUsed)
	enc.EffectiveGasPrice = (*hexutil.Big)(r.EffectiveGasPrice)
	enc.From = r.From
	enc.To = r.To
	enc.Logs = r.Logs
	enc.LogsBloom = r.LogsBloom
	enc.Status = hexutil.Uint64(r.Status)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (r *Receipt) UnmarshalJSON(input []byte) error {
	type Receipt struct {
		BlockHash         *common.Hash    `json:"blockHash,omitempty"`
		BlockNumber       *hexutil.Big    `json:"blockNumber,omitempty"`
		TransactionIndex  *hexutil.Uint   `json:"transactionIndex"             gencodec:"required"`
		TransactionHash   *common.Hash    `json:"transactionHash"              gencodec:"required"`
		Type              *hexutil.Uint64 `json:"type,omitempty"`
		ContractAddress   *common.Address `json:"contractAddress,omitempty"`
		GasUsed           *hexutil.Uint64 `json:"gasUsed"                      gencodec:"required"`
		CumulativeGasUsed *hexutil.Uint64 `json:"cumulativeGasUsed"            gencodec:"required"`
		EffectiveGasPrice *hexutil.Big    `json:"effectiveGasPrice,omitempty"`
		From              *common.Address `json:"from"                         gencodec:"required"`
		To                *common.Address `json:"to,omitempty"`
		Logs              []*Log          `json:"logs"                         gencodec:"required"`
		LogsBloom         *Bloom          `json:"logsBloom"                    gencodec:"required"`
		Status            *hexutil.Uint64 `json:"status"                       gencodec:"required"`
	}
	var dec Receipt
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.BlockHash != nil {
		r.BlockHash = *dec.BlockHash
	}
	if dec.BlockNumber != nil {
		r.BlockNumber = (*big.Int)(dec.BlockNumber)
	}
	if dec.TransactionIndex == nil {
		return errors.New("missing required field 'transactionIndex' for Receipt")
	}
	r.TransactionIndex = uint(*dec.TransactionIndex)
	if dec.TransactionHash == nil {
		return errors.New("missing required field 'transactionHash' for Receipt")
	}
	r.TransactionHash = *dec.TransactionHash
	if dec.Type != nil {
		r.Type = TransactionType(*dec.Type)
	}
	if dec.ContractAddress != nil {
		r.ContractAddress = *dec.ContractAddress
	}
	if dec.GasUsed == nil {
		return errors.New("missing required field 'gasUsed' for Receipt")
	}
	r.GasUsed = uint64(*dec.GasUsed)
	if dec.CumulativeGasUsed == nil {
		return errors.New("missing required field 'cumulativeGasUsed' for Receipt")
	}
	r.CumulativeGasUsed = uint64(*dec.CumulativeGasUsed)
	if dec.EffectiveGasPrice != nil {
		r.EffectiveGasPrice = (*big.Int)(dec.EffectiveGasPrice)
	}
	if dec.From == nil {
		return errors.New("missing required field 'from' for Receipt")
	}
	r.From = *dec.From
	if dec.To != nil {
		r.To = dec.To
	}
	if dec.Logs == nil {
		return errors.New("missing required field 'logs' for Receipt")
	}
	r.Logs = dec.Logs
	if dec.LogsBloom == nil {
		return errors.New("missing required field 'logsBloom' for Receipt")
	}
	r.LogsBloom = *dec.LogsBloom
	if dec.Status == nil {
		return errors.New("missing required field 'status' for Receipt")
	}
	r.Status = uint64(*dec.Status)
	return nil
}
