// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*txMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (t txData) MarshalJSON() ([]byte, error) {
	type txData struct {
		BlockHash   common.Hash     `json:"blockHash,omitempty"`
		BlockNumber *hexutil.Big    `json:"blockNumber,omitempty"`
		From        common.Address  `json:"from"                           gencodec:"required"`
		Gas         hexutil.Uint64  `json:"gas"                            gencodec:"required"`
		GasPrice    *hexutil.Big    `json:"gasPrice"                       gencodec:"required"`
		GasTipCap   *hexutil.Big    `json:"maxPriorityFeePerGas,omitempty"`
		GasFeeCap   *hexutil.Big    `json:"maxFeePerGas,omitempty"`
		Hash        common.Hash     `json:"hash"                           gencodec:"required"`
		Data        hexutil.Bytes   `json:"input"                          gencodec:"required"`
		Nonce       hexutil.Uint64  `json:"nonce"                          gencodec:"required"`
		To          *common.Address `json:"to,omitempty"`
		TxIndex     hexutil.Uint64  `json:"transactionIndex"               gencodec:"required"`
		Value       *hexutil.Big    `json:"value"                          gencodec:"required"`
		Type        hexutil.Uint64  `json:"type"                           gencodec:"required"`
		AccessList  AccessList      `json:"accessList,omitempty"`
		ChainID     *hexutil.Big    `json:"chainId,omitempty"`
		V           *hexutil.Big    `json:"v"                              gencodec:"required"`
		R           *hexutil.Big    `json:"r"                              gencodec:"required"`
		S           *hexutil.Big    `json:"s"                              gencodec:"required"`
	}
	var enc txData
	enc.BlockHash = t.BlockHash
	enc.BlockNumber = (*hexutil.Big)(t.BlockNumber)
	enc.From = t.From
	enc.Gas = hexutil.Uint64(t.Gas)
	enc.GasPrice = (*hexutil.Big)(t.GasPrice)
	enc.GasTipCap = (*hexutil.Big)(t.GasTipCap)
	enc.GasFeeCap = (*hexutil.Big)(t.GasFeeCap)
	enc.Hash = t.Hash
	enc.Data = t.Data
	enc.Nonce = hexutil.Uint64(t.Nonce)
	enc.To = t.To
	enc.TxIndex = hexutil.Uint64(t.TxIndex)
	enc.Value = (*hexutil.Big)(t.Value)
	enc.Type = hexutil.Uint64(t.Type)
	enc.AccessList = t.AccessList
	enc.ChainID = (*hexutil.Big)(t.ChainID)
	enc.V = (*hexutil.Big)(t.V)
	enc.R = (*hexutil.Big)(t.R)
	enc.S = (*hexutil.Big)(t.S)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (t *txData) UnmarshalJSON(input []byte) error {
	type txData struct {
		BlockHash   *common.Hash    `json:"blockHash,omitempty"`
		BlockNumber *hexutil.Big    `json:"blockNumber,omitempty"`
		From        *common.Address `json:"from"                           gencodec:"required"`
		Gas         *hexutil.Uint64 `json:"gas"                            gencodec:"required"`
		GasPrice    *hexutil.Big    `json:"gasPrice"                       gencodec:"required"`
		GasTipCap   *hexutil.Big    `json:"maxPriorityFeePerGas,omitempty"`
		GasFeeCap   *hexutil.Big    `json:"maxFeePerGas,omitempty"`
		Hash        *common.Hash    `json:"hash"                           gencodec:"required"`
		Data        *hexutil.Bytes  `json:"input"                          gencodec:"required"`
		Nonce       *hexutil.Uint64 `json:"nonce"                          gencodec:"required"`
		To          *common.Address `json:"to,omitempty"`
		TxIndex     *hexutil.Uint64 `json:"transactionIndex"               gencodec:"required"`
		Value       *hexutil.Big    `json:"value"                          gencodec:"required"`
		Type        *hexutil.Uint64 `json:"type"                           gencodec:"required"`
		AccessList  *AccessList     `json:"accessList,omitempty"`
		ChainID     *hexutil.Big    `json:"chainId,omitempty"`
		V           *hexutil.Big    `json:"v"                              gencodec:"required"`
		R           *hexutil.Big    `json:"r"                              gencodec:"required"`
		S           *hexutil.Big    `json:"s"                              gencodec:"required"`
	}
	var dec txData
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.BlockHash != nil {
		t.BlockHash = *dec.BlockHash
	}
	if dec.BlockNumber != nil {
		t.BlockNumber = (*big.Int)(dec.BlockNumber)
	}
	if dec.From == nil {
		return errors.New("missing required field 'from' for txData")
	}
	t.From = *dec.From
	if dec.Gas == nil {
		return errors.New("missing required field 'gas' for txData")
	}
	t.Gas = uint64(*dec.Gas)
	if dec.GasPrice == nil {
		return errors.New("missing required field 'gasPrice' for txData")
	}
	t.GasPrice = (*big.Int)(dec.GasPrice)
	if dec.GasTipCap != nil {
		t.GasTipCap = (*big.Int)(dec.GasTipCap)
	}
	if dec.GasFeeCap != nil {
		t.GasFeeCap = (*big.Int)(dec.GasFeeCap)
	}
	if dec.Hash == nil {
		return errors.New("missing required field 'hash' for txData")
	}
	t.Hash = *dec.Hash
	if dec.Data == nil {
		return errors.New("missing required field 'input' for txData")
	}
	t.Data = *dec.Data
	if dec.Nonce == nil {
		return errors.New("missing required field 'nonce' for txData")
	}
	t.Nonce = uint64(*dec.Nonce)
	if dec.To != nil {
		t.To = dec.To
	}
	if dec.TxIndex == nil {
		return errors.New("missing required field 'transactionIndex' for txData")
	}
	t.TxIndex = uint(*dec.TxIndex)
	if dec.Value == nil {
		return errors.New("missing required field 'value' for txData")
	}
	t.Value = (*big.Int)(dec.Value)
	if dec.Type == nil {
		return errors.New("missing required field 'type' for txData")
	}
	t.Type = TransactionType(*dec.Type)
	if dec.AccessList != nil {
		t.AccessList = *dec.AccessList
	}
	if dec.ChainID != nil {
		t.ChainID = (*big.Int)(dec.ChainID)
	}
	if dec.V == nil {
		return errors.New("missing required field 'v' for txData")
	}
	t.V = (*big.Int)(dec.V)
	if dec.R == nil {
		return errors.New("missing required field 'r' for txData")
	}
	t.R = (*big.Int)(dec.R)
	if dec.S == nil {
		return errors.New("missing required field 's' for txData")
	}
	t.S = (*big.Int)(dec.S)
	return nil
}
